<launch>
    <arg name="wname" default="TestSpace" />
    <arg name="rname" default="gr1t1" />
    <arg name="robot_path" value="(find $(arg rname)_description)" />
    <arg name="dollar" value="$" />

    <arg name="paused" default="true" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />
<<<<<<< HEAD
=======
    <arg name="initial_joint_positions" default="
     -J l_hip_roll 0 
     -J l_hip_yaw 0 
     -J l_hip_pitch -0.2 
     -J l_knee_pitch 0.4 
     -J l_ankle_pitch -0.2 
     -J r_hip_roll 0 
     -J r_hip_yaw 0 
     -J r_hip_pitch -0.2 
     -J r_knee_pitch 0.4 
     -J r_ankle_pitch -0.2" doc="Initial joint configuration of the robot"/>

>>>>>>> 7451be88493b29e68a35bd3cfa0e3fd2903516c2
    <arg name="user_debug" default="false" />
    <arg name="initial_joint_positions" 
        default=" -J l_hip_roll 0 -J l_hip_yaw 0 -J l_hip_pitch -0.3 -J l_knee_pitch 0.7 -J l_ankle_pitch -0.4 -J r_hip_roll 0 -J r_hip_yaw 0 -J r_hip_pitch -0.3 -J r_knee_pitch 0.7 -J r_ankle_pitch -0.4" 
        doc="Initial joint configuration of the robot"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- 目前来看现在TestSpace中的参数可以覆盖掉empty_world.launch中include的empty.world里的参数 -->
        <arg name="world_name" value="$(find simulation_all)/worlds/$(arg wname).world" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <!--<param name="robot_description" textfile="$(find
     gh1_description)/urdf/$(arg robot_path).urdf" />
 -->

    <!-- <param name="robot_description" textfile="$(arg dollar)$(arg robot_path)/urdf/gr1t1_description.urdf"/> -->

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(arg dollar)$(arg robot_path)/xacro/robot.xacro' DEBUG:=$(arg user_debug)" />
        
    <!-- <param name="robot_description" command="$(find xacro)/xacro -->    <!--inorder
    '$(arg dollar)$(arg robot_path)/xacro/robot.xacro' DEBUG:=$(arg user_debug)" /> -->
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Set trunk and joint positions at startup -->
<<<<<<< HEAD
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen" args="-urdf -z 1.29 -model $(arg rname)_gazebo $(arg initial_joint_positions) -param robot_description " />
=======
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen" args="-urdf -z 1.35 -model $(arg rname)_gazebo -param robot_description $(arg initial_joint_positions)" />
>>>>>>> 7451be88493b29e68a35bd3cfa0e3fd2903516c2

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(arg dollar)$(arg robot_path)/config/robot_control.yaml" command="load" />

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false" output="screen" ns="/$(arg rname)_gazebo" args="joint_state_controller
          l_hip_roll_controller l_hip_yaw_controller l_hip_pitch_controller l_knee_pitch_controller l_ankle_pitch_controller
          r_hip_roll_controller r_hip_yaw_controller r_hip_pitch_controller r_knee_pitch_controller r_ankle_pitch_controller " />

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg rname)_gazebo/joint_states" />
    </node>

</launch>